package controllers

import (
	"github.com/astaxie/beego"
	"net/http"
	"strings"
	"io/ioutil"
	"encoding/json"
)

type KubePrometheusController struct {
	BaseController
}

func (c *KubePrometheusController) Prepare() {
	//先执行
	c.BaseController.Prepare()
	//如果一个Controller的少数Action需要权限控制，则将验证放到需要控制的Action里
	//c.checkAuthor("Namespaces", "Nodes")
	//如果一个Controller的所有Action都需要登录验证，则将验证放到Prepare
	//这里注释了权限控制，因此这里需要登录验证
	c.checkLogin()
}

type PrometheusResp struct {
	Status string `json:"status"`
	Data Data `json:"data"`
}
type Data struct {
	Result []Result `json:"result"`
}
type Result struct {
	Value []interface{} `json:"value"`
}
//集群汇总信息展示2s读取一次,cpu/mem/disk
func (c *KubePrometheusController) ProCpuMemDisk() {
	Prometheus_url := beego.AppConfig.String("Prometheus::prometheus_url")
	err,cpu:=GetPrometheus(Prometheus_url+"api/v1/query?query=avg(node%3Anode_cpu_saturation_load1%3A)*100")
	if err != nil {
		beego.Error(err)
		return
	}
	err,mem:=GetPrometheus(Prometheus_url+"api/v1/query?query=avg(node%3Anode_memory_utilisation%3A)*100")
	if err != nil {
		beego.Error(err)
		return
	}
	err,disk:=GetPrometheus(Prometheus_url+"api/v1/query?query=(sum(node_filesystem_size%7Bjob%3D%22node-exporter%22%2Cdevice!%3D%22rootfs%22%7D)-sum(node_filesystem_avail%7Bjob%3D%22node-exporter%22%2Cdevice!%3D%22rootfs%22%7D))*100%2Fsum(node_filesystem_size%7Bjob%3D%22node-exporter%22%2Cdevice!%3D%22rootfs%22%7D)")
	if err != nil {
		beego.Error(err)
		return
	}
	//定义返回的数据结构
	result := make(map[string]interface{})
	result["cpu"]=cpu
	result["mem"]=mem
	result["disk"]=disk
	c.Data["json"] = result
	c.ServeJSON()
}

//静态数据展示
func (c *KubePrometheusController) ProCount() {
	Prometheus_url := beego.AppConfig.String("Prometheus::prometheus_url")
	err,statefulset:=GetPrometheus(Prometheus_url+"api/v1/query?query=count(kube_statefulset_created)")
	if err != nil {
		beego.Error(err)
		return
	}
	err,daemonset:=GetPrometheus(Prometheus_url+"api/v1/query?query=count(kube_daemonset_created)")
	if err != nil {
		beego.Error(err)
		return
	}
	err,cronjob:=GetPrometheus(Prometheus_url+"api/v1/query?query=count(kube_cronjob_created)")
	if err != nil {
		beego.Error(err)
		return
	}
	err,deployment:=GetPrometheus(Prometheus_url+"api/v1/query?query=count(kube_deployment_created)")
	if err != nil {
		beego.Error(err)
		return
	}
	err,nodenum:=GetPrometheus(Prometheus_url+"api/v1/query?query=count(kube_node_created)")
	if err != nil {
		beego.Error(err)
		return
	}
	err,podnum:=GetPrometheus(Prometheus_url+"api/v1/query?query=sum(kubelet_running_pod_count)")
	if err != nil {
		beego.Error(err)
		return
	}
	err,netin:=GetPrometheus(Prometheus_url+"api/v1/query?query=sum(instance%3Anode_network_receive_bytes%3Arate%3Asum)")
	if err != nil {
		beego.Error(err)
		return
	}
	err,netout:=GetPrometheus(Prometheus_url+"api/v1/query?query=sum(instance%3Anode_network_transmit_bytes%3Arate%3Asum)")
	if err != nil {
		beego.Error(err)
		return
	}
	//api/v1/query?query=sum(instance%3Anode_network_receive_bytes%3Arate%3Asum) 传入
	//api/v1/query?query=sum(instance%3Anode_network_transmit_bytes%3Arate%3Asum) 传出
	//定义返回的数据结构
	result := make(map[string]interface{})
	result["statefulset"]=statefulset
	result["daemonset"]=daemonset
	result["cronjob"]=cronjob
	result["deployment"]=deployment
	result["nodenum"]=nodenum
	result["podnum"]=podnum
	result["netin"]=netin
	result["netout"]=netout
	c.Data["json"] = result
	c.ServeJSON()
}

func GetPrometheus(url string) (error,string) {
	client := &http.Client{}
	req, err := http.NewRequest("GET", url, strings.NewReader(""))
	//req, err := http.NewRequest("GET", url, strings.NewReader(""))
	if err != nil {
		beego.Error(err)
		return err,""
	}
	//req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	//req.Header.Set("Cookie", "rem-username=admin; beegosessionID=3a7f697427caed8eb17f14368bb8c832")
	resp, err := client.Do(req)
	if err != nil {
		return err,""
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err,""
	}
	//fmt.Println(url,string(body))
	prometheusResp:=PrometheusResp{}
	json.Unmarshal(body,&prometheusResp)
	return nil,prometheusResp.Data.Result[0].Value[1].(string)
}

